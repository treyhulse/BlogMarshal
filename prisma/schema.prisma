// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Command to run: npx prisma migrate dev --name add_address_transactions



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}        

model User {
  id           String  @id @unique
  email        String
  firstName    String
  lastName     String
  profileImage String
  customerId   String? @unique

  createdAt DateTime @default(now())

  Subscription Subscription?
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}





// HERE IS WHERE I START TO BRANCH OFF

model Items {
  id                String   @id @default(uuid())
  org_id            String
  name              String
  description       String?
  sku               String
  type              String
  price             Decimal?
  global_identifier String?
  status            ItemStatus @default(DRAFT)
  metadata          Json?
  notes             String?
  unit_of_measure   String
  weight            Decimal?
  weight_unit       WeightUnit?
  length            Decimal?
  length_unit       DimensionUnit?
  width             Decimal?
  width_unit        DimensionUnit?
  depth             Decimal?
  depth_unit        DimensionUnit?
  tags              Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  front_image_url    String?
  back_image_url     String?
  images            Json?    // Will store an array of image URLs
  inventory_quantity Int          @default(0)
  low_stock_alert   Int?
  inventory_movements InventoryMovement[]

  // Add this relation
  TransactionItems  TransactionItems[]

  // Add these relations
  CartItems       CartItems[]

  @@unique([org_id, sku])
}

/// ItemImage: {
///   url: string
///   name: string
///   size: number
///   type: string
///   uploadedAt: string
///   position: 'front' | 'back' | number
/// }

enum ItemStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum WeightUnit {
  OUNCE
  POUND
}

enum DimensionUnit {
  INCH
  CENTIMETER
  FOOT
}

model Customers {
  id                      String    @id @default(uuid())
  customer_id             String
  org_id                 String
  first_name             String?
  last_name              String?
  company_name           String?
  email                  String
  alt_email              String?
  phone                  String?
  alt_phone              String?
  account_rep            String?
  comments               String?
  last_order_date        DateTime?
  customer_category      String?
  notes                  String?   @db.Text
  default_shipping_address String?
  default_billing_address  String?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  // Relations
  addresses              Addresses[]
  shipping_address       Addresses? @relation("ShippingAddress", fields: [default_shipping_address], references: [address_id])
  billing_address        Addresses? @relation("BillingAddress", fields: [default_billing_address], references: [address_id])

  // Add this relation
  transactions     Transactions[]

  // Add these relations
  carts           Cart[]

  @@unique([org_id, customer_id])
}

model Addresses {
  id            String    @id @default(uuid())
  address_id    String    @unique @default(uuid())
  org_id        String
  customer_id   String
  easypost_id   String?
  name          String?
  company       String?
  street1       String
  street2       String?
  city          String
  state         String
  country       String
  zip           String
  verified      Boolean   @default(false)
  valid         AddressValidationStatus @default(PENDING)
  residential   Boolean?
  latitude      Float?
  longitude     Float?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  customer      Customers @relation(fields: [customer_id], references: [id])
  shipping_for  Customers[] @relation("ShippingAddress")
  billing_for   Customers[] @relation("BillingAddress")
  locations     Locations[]

  // Add these new relations
  transactions_billing   Transactions[] @relation("TransactionBillingAddress")
  transactions_shipping  Transactions[] @relation("TransactionShippingAddress")

  // Add these relations
  carts_billing   Cart[] @relation("CartBillingAddress")
  carts_shipping  Cart[] @relation("CartShippingAddress")

  @@unique([org_id, address_id])
}

enum AddressValidationStatus {
  VALID
  INVALID
  PENDING
}

model Parcels {
  id String @id @default(uuid())
  org_id String
  name String
  description String
  length Decimal
  length_unit DimensionUnit
  width Decimal
  width_unit DimensionUnit
  depth Decimal
  depth_unit DimensionUnit
  weight Decimal
  weight_unit WeightUnit
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([org_id, id])
}

model Locations {
  id String @id @default(uuid())
  org_id String
  name String
  description String
  address_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  address Addresses @relation(fields: [address_id], references: [id])

  @@unique([org_id, id])
}

enum TransactionType {
  SALE
  QUOTE
  PURCHASE
  RETURN
  INVOICE
  SUBSCRIPTION
  CREDIT
  REFUND
  TRANSFER
  JOB
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELED
}

model Transactions {
  id                String            @id @default(uuid())
  number            String            // Human readable ID
  org_id            String
  entity_id         String?           // Optional as not all transaction types need an entity
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  total             Decimal
  tax_amount        Decimal          @default(0)
  shipping_cost     Decimal          @default(0)
  discount_total    Decimal          @default(0)
  total_amount      Decimal          @default(0)
  payment_status    PaymentStatus    @default(PENDING)
  payment_method    PaymentMethod?
  shipping_method   String?          // e.g., "USPS Priority", "FedEx Ground"
  estimated_ship_date DateTime?
  actual_ship_date   DateTime?
  billing_address_id  String?
  shipping_address_id String?
  discount_id       String?          
  tax              Decimal?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  // Relations
  items            TransactionItems[]
  customer         Customers?       @relation(fields: [entity_id], references: [id])
  billing_address  Addresses?      @relation("TransactionBillingAddress", fields: [billing_address_id], references: [id])
  shipping_address Addresses?      @relation("TransactionShippingAddress", fields: [shipping_address_id], references: [id])
  discount         Discount?       @relation(fields: [discount_id], references: [id])
  shipments        Shipment[]     // Add the reverse relation

  @@unique([org_id, number])
}

model TransactionItems {
  id              String      @id @default(uuid())
  transaction_id  String
  item_id         String
  quantity        Int
  price_level     String?     // This is optional (nullable)
  unit_price      Decimal
  discount        Decimal?
  total           Decimal

  // Relations
  transaction     Transactions @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  item           Items       @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@unique([transaction_id, item_id])
}









// HERE IS WHERE I STARTED TO BUILD STOREFRONT APPROVED

model Store {
  id             String   @id @default(uuid()) @map("store_id")
  org_id         String   @map("org_id")
  theme_id       String?  @map("theme_id")
  store_logo_url String?  @map("store_logo_url")
  slogan         String?
  name           String
  subdomain      String   @unique
  domain         String?
  domain_verified  Boolean  @default(false)
  verification_code String? // Stores the TXT record value
  timezone       String?
  metadata       Json?

  // Relations
  pages          Page[]
  theme          Theme?   @relation(fields: [theme_id], references: [id])
}

model Page {
  id       String @id @default(uuid()) @map("page_id")
  store_id String @map("store_id")
  org_id   String @map("org_id")
  name     String
  metadata Json?

  // Relations
  store    Store  @relation(fields: [store_id], references: [id])
}

model Component {
  id       String @id @default(uuid()) @map("component_id")
  org_id   String @map("org_id")
  name     String
  metadata Json?
}

model Theme {
  id       String   @id @default(uuid()) @map("theme_id")
  org_id   String   @map("org_id")
  name     String
  metadata Json?

  // Relations
  stores   Store[]
}








// HERE IS WHERE I STARTED TO BUILD EMAIL OUT
model Conversation {
  id          String         @id @default(cuid())
  subject     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  org_id      String        // Organization ID from Kinde
  user_id     String        // User ID from Kinde
  messages    EmailMessage[]

  @@index([org_id])
  @@index([user_id])
}

model EmailMessage {
  id              String        @id @default(cuid())
  resendId        String?      // ID returned from Resend
  conversationId  String
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  from            String
  to              String
  subject         String
  message         String       @db.Text
  status          EmailStatus  @default(SENT)
  readAt          DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  org_id          String      // Organization ID from Kinde
  user_id         String      // User ID from Kinde

  @@index([conversationId])
  @@index([org_id])
  @@index([user_id])
  @@index([resendId])
}

enum EmailStatus {
  SENT
  DELIVERED
  FAILED
  OPENED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  OTHER
}




// ADDING IN CART RELATIONS

model Cart {
  id                String       @id @default(uuid())
  org_id            String
  user_id           String      // Supabase auth user_id
  customer_id       String?     // Optional link to Customers model
  status            CartStatus   @default(ACTIVE)
  total             Decimal      @default(0)
  tax_amount        Decimal      @default(0)
  shipping_cost     Decimal      @default(0)
  discount_total    Decimal      @default(0)
  total_amount      Decimal      @default(0)
  total_weight      Decimal      @default(0)
  billing_address_id   String?
  shipping_address_id  String?
  checkout_session_id  String?  
  discount_id       String?      
  expires_at        DateTime?    
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  // Relations
  items             CartItems[]
  customer          Customers?   @relation(fields: [customer_id], references: [id])
  billing_address   Addresses?   @relation("CartBillingAddress", fields: [billing_address_id], references: [id])
  shipping_address  Addresses?   @relation("CartShippingAddress", fields: [shipping_address_id], references: [id])
  discount          Discount?    @relation(fields: [discount_id], references: [id])

  @@unique([org_id, id])
}

model CartItems {  // Renamed from CartItem
  id              String    @id @default(uuid())
  cart_id         String
  item_id         String
  quantity        Int
  unit_price      Decimal
  total           Decimal

  // Relations
  cart            Cart      @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  item            Items     @relation(fields: [item_id], references: [id])

  @@unique([cart_id, item_id])
}

enum CartStatus {
  ACTIVE
  CHECKOUT_IN_PROGRESS
  CONVERTED        // When cart is converted to transaction
  ABANDONED
  EXPIRED
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  PACKED
  SHIPPED
  DELIVERED
  RETURNED
}

model Shipment {
  id              String            @id @default(uuid())
  transaction_id  String
  carrier         String
  tracking_number String
  status          ShipmentStatus    @default(PENDING)
  shipped_at      DateTime?
  delivered_at    DateTime?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  transaction     Transactions      @relation(fields: [transaction_id], references: [id])
}

model Discount {
  id              String       @id @default(uuid())
  org_id          String
  code            String
  type            DiscountType
  value           Decimal
  starts_at       DateTime
  ends_at         DateTime?
  usage_limit     Int?
  times_used      Int          @default(0)
  minimum_amount  Decimal?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  
  // Relations
  transactions    Transactions[]
  carts          Cart[]        // Added cart relation

  @@unique([org_id, code])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model InventoryMovement {
  id              String    @id @default(uuid())
  item_id         String
  quantity_change Int       // Positive for additions, negative for reductions
  reason          String
  reference_id    String?   // Could be transaction_id, adjustment_id, etc.
  created_at      DateTime  @default(now())

  item            Items     @relation(fields: [item_id], references: [id])
}







// Here is where I started building out the reports tables 

model AnalyticsReport {
  id              String    @id @default(uuid())
  org_id          String
  user_id         String    // Creator of the report
  name            String
  description     String?
  type            ReportType
  config          Json      // Stores visualization and data configuration
  is_public       Boolean   @default(false)
  is_favorite     Boolean   @default(false)
  last_run_at     DateTime?
  schedule        Json?     // Optional scheduling configuration
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  dashboards      DashboardReports[]
  shared_with     ReportSharing[]

  @@unique([org_id, name])
}

model Dashboard {
  id              String    @id @default(uuid())
  org_id          String
  user_id         String    // Creator of the dashboard
  name            String
  description     String?
  layout          Json      // Stores the grid layout configuration
  is_public       Boolean   @default(false)
  is_favorite     Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  reports         DashboardReports[]
  shared_with     DashboardSharing[]

  @@unique([org_id, name])
}

model DashboardReports {
  id              String    @id @default(uuid())
  dashboard_id    String
  report_id       String
  position        Json      // Stores position and size in the grid
  created_at      DateTime  @default(now())

  // Relations
  dashboard       Dashboard       @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)
  report          AnalyticsReport @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@unique([dashboard_id, report_id])
}

model ReportSharing {
  id              String    @id @default(uuid())
  report_id       String
  shared_with     String    // User ID the report is shared with
  permissions     ReportPermission
  created_at      DateTime  @default(now())

  // Relations
  report          AnalyticsReport @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@unique([report_id, shared_with])
}

model DashboardSharing {
  id              String    @id @default(uuid())
  dashboard_id    String
  shared_with     String    // User ID the dashboard is shared with
  permissions     ReportPermission
  created_at      DateTime  @default(now())

  // Relations
  dashboard       Dashboard @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)

  @@unique([dashboard_id, shared_with])
}

enum ReportType {
  BAR_CHART
  LINE_CHART
  PIE_CHART
  TABLE
  KPI
  FUNNEL
  SCATTER_PLOT
  HEATMAP
  CUSTOM
}

enum ReportPermission {
  VIEW
  EDIT
  ADMIN
  MANAGE
}
